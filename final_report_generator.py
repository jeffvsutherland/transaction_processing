# final_report_generator.py

import os
import pandas as pd
import logging
from datetime import datetime

logger = logging.getLogger(__name__)


class FinalReportGenerator:
    def __init__(self, config, notes):
        self.config = config
        self.notes = notes

    def generate_report(self, data, errors, start_date, end_date):
        logger.info("Generating final consolidated report")

        report = self._generate_report_header(start_date, end_date)
        report += self._generate_summary(data)
        report += self._generate_error_section(errors)
        report += self._generate_details_section(data)
        report += self._generate_notes_section()
        report += self._generate_footer()

        logger.info("Final consolidated report generated")
        return report

    def _generate_report_header(self, start_date, end_date):
        header = "# Final Consolidated Expense Report\n\n"
        header += f"Period: {start_date.strftime('%Y-%m-%d')} to {end_date.strftime('%Y-%m-%d')}\n\n"
        header += f"Generated on: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n\n"
        return header

    def _generate_summary(self, data):
        summary = "## Summary\n\n"

        df = data['merged_df']
        total_transactions = len(df)
        total_amount = df['amount'].sum()

        summary += f"Total Transactions: {total_transactions}\n"
        summary += f"Total Amount: ${total_amount:.2f}\n\n"

        # Summary by employer
        summary += "### Summary by Employer\n\n"
        employer_summary = df.groupby('employer')['amount'].sum().sort_values(ascending=False)
        summary += employer_summary.to_markdown() + "\n\n"

        return summary

    def _generate_error_section(self, errors):
        if not errors:
            return "## Errors\n\nNo errors were encountered during processing.\n\n"

        error_section = "## Errors\n\n"
        for error in errors:
            error_section += f"- {error}\n"
        error_section += "\n"
        return error_section

    def _generate_details_section(self, data):
        details = "## Details\n\n"

        details += "### Input Files Processed\n\n"
        for file, columns in data['input_files'].items():
            details += f"- {file}: {', '.join(columns)}\n"
        details += "\n"

        details += "### Individual Reports Generated\n\n"
        for employer, report_path in data['individual_reports'].items():
            details += f"- {employer}: {report_path}\n"
        details += "\n"

        return details

    def _generate_notes_section(self):
        notes_section = "## Notes\n\n"
        for note in self.notes.get('notes', []):
            notes_section += f"- {note}\n"
        notes_section += "\n"
        return notes_section

    def _generate_footer(self):
        return f"Report generated by Expense Report Generator v{self.config.get('version', '1.0')}\n"

    def save_report(self, report, output_dir):
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"final_consolidated_report_{timestamp}.md"
        filepath = os.path.join(output_dir, filename)

        with open(filepath, 'w') as f:
            f.write(report)

        logger.info(f"Final consolidated report saved to {filepath}")
        return filepath


if __name__ == "__main__":
    # This allows for easy testing of this module independently
    import json
    from data_processor import DataProcessor
    from expense_report_generator import ExpenseReportGenerator

    with open('config.json', 'r') as f:
        config = json.load(f)

    with open('note.json', 'r') as f:
        notes = json.load(f)

    # Process some data
    data_processor = DataProcessor(config)
    df = data_processor.process()

    # Generate individual reports
    expense_generator = ExpenseReportGenerator(config, notes)
    start_date = datetime.strptime(config['date_range']['start_date'], '%Y-%m-%d')
    end_date = datetime.strptime(config['date_range']['end_date'], '%Y-%m-%d')

    individual_reports = {}
    for employer in config['employers']:
        report = expense_generator.generate_report(df, employer, start_date, end_date)
        report_path = expense_generator.save_report(report, employer, config['output_dir'])
        individual_reports[employer] = report_path

    # Generate final report
    final_generator = FinalReportGenerator(config, notes)
    data = {
        'merged_df': df,
        'individual_reports': individual_reports,
        'input_files': data_processor.get_input_files(),
    }
    errors = []  # In a real scenario, you'd collect errors during processing
    final_report = final_generator.generate_report(data, errors, start_date, end_date)
    final_generator.save_report(final_report, config['output_dir'])

    print("Test run completed. Check the output directory for generated reports.")